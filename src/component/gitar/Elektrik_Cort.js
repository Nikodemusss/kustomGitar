/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/Cort_G300_Elektrik.glb 
*/
import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { UseCustomization } from "../context/ColorContext";
import { UseTexture } from "../context/TextureContext";
import { TextureLoader } from "three";

export function Elektrik_Cort(props) {
  const { nodes } = useGLTF("/Cort_G300_Elektrik.glb");
  const ColorContext = UseCustomization();
  const { Tuner, Neck, Nut, Fret, FretBoard, Body, Bridge, BridgeNut } =
    ColorContext;
  const bridgenut = useRef();
  const fret = useRef();
  const bridge = useRef();
  const nut = useRef();
  const body = useRef();
  const neck = useRef();
  const tuner = useRef();
  const fretboard = useRef();
  const materials = useRef();
  const {
    TunerTxt,
    FretTxt,
    FretBoardTxt,
    NeckTxt,
    NutTxt,
    BodyTxt,
    BridgeTxt,
    BridgeNutTxt,
  } = UseTexture();

  useEffect(() => {
    const loadTexture = async () => {
      if (TunerTxt) {
        try {
          const textureLoader = new TextureLoader();
          const texture = await textureLoader.loadAsync(TunerTxt);
          tuner.current.map = texture;
          tuner.current.needsUpdate = true;
        } catch (error) {}
      }
    };
    loadTexture();
  }, [TunerTxt]);

  useEffect(() => {
    const loadTexture = async () => {
      if (NeckTxt) {
        try {
          const textureLoader = new TextureLoader();
          const texture = await textureLoader.loadAsync(NeckTxt);
          neck.current.map = texture;
          neck.current.needsUpdate = true;
        } catch {}
      }
    };
    loadTexture();
  }, [NeckTxt]);

  useEffect(() => {
    const loadTexture = async () => {
      if (BodyTxt) {
        try {
          const textureLoader = new TextureLoader();
          const texture = await textureLoader.loadAsync(BodyTxt);
          body.current.map = texture;
          body.current.needsUpdate = true;
        } catch {}
      }
    };
    loadTexture();
  }, [BodyTxt]);

  useEffect(() => {
    const loadTexture = async () => {
      if (FretBoardTxt) {
        try {
          const textureLoader = new TextureLoader();
          const texture = await textureLoader.loadAsync(FretBoardTxt);
          fretboard.current.map = texture;
          fretboard.current.needsUpdate = true;
        } catch {}
      }
    };
    loadTexture();
  }, [FretBoardTxt]);

  useEffect(() => {
    const loadTexture = async () => {
      if (FretTxt) {
        try {
          const textureLoader = new TextureLoader();
          const texture = await textureLoader.loadAsync(FretTxt);
          fret.current.map = texture;
          fret.current.needsUpdate = true;
        } catch (error) {}
      }
    };
    loadTexture();
  }, [FretTxt]);

  useEffect(() => {
    const loadTexture = async () => {
      if (NutTxt) {
        try {
          const textureLoader = new TextureLoader();
          const texture = await textureLoader.loadAsync(NutTxt);
          nut.current.map = texture;
          nut.current.needsUpdate = true;
        } catch {}
      }
    };
    loadTexture();
  }, [NutTxt]);

  useEffect(() => {
    const loadTexture = async () => {
      if (BridgeNutTxt) {
        try {
          const textureLoader = new TextureLoader();
          const texture = await textureLoader.loadAsync(BridgeNutTxt);
          bridgenut.current.map = texture;
          bridgenut.current.needsUpdate = true;
        } catch {}
      }
    };
    loadTexture();
  }, [BridgeNutTxt]);

  useEffect(() => {
    const loadTexture = async () => {
      if (BridgeTxt) {
        try {
          const textureLoader = new TextureLoader();
          const texture = await textureLoader.loadAsync(BridgeTxt);
          bridge.current.map = texture;
          bridge.current.needsUpdate = true;
        } catch {}
      }
    };
    loadTexture();
  }, [BridgeTxt]);
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Body.geometry}
        material={materials.Body}
        position={[0.11, -1.068, 0.074]}
        rotation={[Math.PI / 2, 0, 0]}
      >
        <meshStandardMaterial {...props} color={Body.color} ref={body} />
      </mesh>
      <mesh
        geometry={nodes.Neck.geometry}
        material={materials.Neck}
        position={[0.129, 0.849, 0.04]}
      >
        <meshStandardMaterial {...props} color={Neck.color} ref={neck} />
      </mesh>
      <mesh
        geometry={nodes.BridgeNut.geometry}
        material={materials.BridgeNut}
        position={[0.09, -1.351, 0.134]}
        rotation={[Math.PI / 2, 0, 0]}
      >
        <meshStandardMaterial
          {...props}
          color={BridgeNut.color}
          ref={bridgenut}
        />
      </mesh>
      <mesh
        geometry={nodes.Bridge.geometry}
        material={materials.Bridge}
        position={[0.079, -1.37, 0.126]}
        rotation={[Math.PI / 2, 0, 0]}
      >
        <meshStandardMaterial {...props} color={Bridge.color} ref={bridge} />
      </mesh>
      <mesh
        geometry={nodes.Tuner.geometry}
        material={materials.Tuner}
        position={[0.486, -1.383, 0.148]}
        rotation={[Math.PI / 2, 0, 0]}
      >
        <meshStandardMaterial {...props} color={Tuner.color} ref={tuner} />
      </mesh>
      <mesh
        geometry={nodes.FretBoard.geometry}
        material={materials.FretBoard}
        position={[0.085, 0.198, 0.136]}
      >
        <meshStandardMaterial
          {...props}
          color={FretBoard.color}
          ref={fretboard}
        />
      </mesh>
      <mesh
        geometry={nodes.Nut.geometry}
        material={materials.Nut}
        position={[0.089, 1.274, 0.149]}
      >
        <meshStandardMaterial {...props} color={Nut.color} ref={nut} />
      </mesh>
      <mesh
        geometry={nodes.Fret.geometry}
        material={nodes.Fret.material}
        position={[0.107, -0.849, 0.154]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[0.08, 0.068, 0.08]}
      >
        <meshStandardMaterial {...props} color={Fret.color} ref={fret} />
      </mesh>
    </group>
  );
}

export default Elektrik_Cort;
useGLTF.preload("/Cort_G300_Elektrik.glb");
