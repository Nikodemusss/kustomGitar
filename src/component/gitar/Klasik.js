/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 public/Klasik.glb 
*/

import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { UseCustomization } from "../context/ColorContext";
import { UseTexture } from "../context/TextureContext";
import { TextureLoader } from "three";

export function Klasik(props) {
  const { nodes } = useGLTF("/Klasik.glb");
  const { Tuner, Neck, Fret, FretBoard, Nut, Body, Bridge, BridgeNut } =
    UseCustomization();
  const tuner = useRef();
  const neck = useRef();
  const body = useRef();
  const fretboard = useRef();
  const {
    TunerTxt,
    FretTxt,
    FretBoardTxt,
    NeckTxt,
    NutTxt,
    BodyTxt,
    BridgeTxt,
    BridgeNutTxt,
  } = UseTexture();

  useEffect(() => {
    const loadTexture = async () => {
      if (TunerTxt) {
        try {
          const textureLoader = new TextureLoader();
          const texture = await textureLoader.loadAsync(TunerTxt);
          tuner.current.map = texture;
          tuner.current.needsUpdate = true;
        } catch (error) {}
      }
    };
    loadTexture();
  }, [TunerTxt]);

  useEffect(() => {
    const loadTexture = async () => {
      if (NeckTxt) {
        try {
          const textureLoader = new TextureLoader();
          const texture = await textureLoader.loadAsync(NeckTxt);
          neck.current.map = texture;
          neck.current.needsUpdate = true;
        } catch {}
      }
    };
    loadTexture();
  }, [NeckTxt]);

  useEffect(() => {
    const loadTexture = async () => {
      if (BodyTxt) {
        try {
          const textureLoader = new TextureLoader();
          const texture = await textureLoader.loadAsync(BodyTxt);
          body.current.map = texture;
          body.current.needsUpdate = true;
        } catch {}
      }
    };
    loadTexture();
  }, [BodyTxt]);

  useEffect(() => {
    const loadTexture = async () => {
      if (FretBoardTxt) {
        try {
          const textureLoader = new TextureLoader();
          const texture = await textureLoader.loadAsync(FretBoardTxt);
          fretboard.current.map = texture;
          fretboard.current.needsUpdate = true;
        } catch {}
      }
    };
    loadTexture();
  }, [FretBoardTxt]);

  console.log(BodyTxt);
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Neck.geometry}
        material={nodes.Neck.material}
        position={[0, 0, -0.038]}
      >
        <meshStandardMaterial {...props} color={Neck.color} ref={neck} />
      </mesh>
      <mesh
        geometry={nodes.Bridge_Saddle.geometry}
        material={nodes.Bridge_Saddle.material}
        position={[0, -1.507, 0.209]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.476}
      >
        <meshStandardMaterial {...props} color={Bridge.color} />
      </mesh>
      <mesh
        geometry={nodes.Bridge.geometry}
        material={nodes.Bridge.material}
        position={[0, 0.659, -1.443]}
      >
        <meshStandardMaterial {...props} color={BridgeNut.color} />
      </mesh>
      <mesh
        geometry={nodes.Nut.geometry}
        material={nodes.Nut.material}
        position={[0, 1.615, 0.259]}
        rotation={[-Math.PI, 0, -Math.PI]}
        scale={[-0.128, -0.011, -0.011]}
      >
        <meshStandardMaterial {...props} color={Nut.color} />
      </mesh>
      <mesh
        geometry={nodes.FretBoard.geometry}
        material={nodes.FretBoard.material}
        position={[0, 0.508, 0.236]}
        scale={[0.128, 1.084, 0.027]}
      >
        <meshStandardMaterial
          {...props}
          color={FretBoard.color}
          ref={fretboard}
        />
      </mesh>
      <mesh
        geometry={nodes.Cube001.geometry}
        material={nodes.Cube001.material}
        position={[0, 1.421, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.13, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube002.geometry}
        material={nodes.Cube002.material}
        position={[0, 1.246, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.13, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube003.geometry}
        material={nodes.Cube003.material}
        position={[0, 1.083, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.132, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube004.geometry}
        material={nodes.Cube004.material}
        position={[0, 0.928, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.132, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube005.geometry}
        material={nodes.Cube005.material}
        position={[0, 0.781, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.133, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube006.geometry}
        material={nodes.Cube006.material}
        position={[0, 0.645, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.133, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube007.geometry}
        material={nodes.Cube007.material}
        position={[0, 0.513, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.134, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube008.geometry}
        material={nodes.Cube008.material}
        position={[0, 0.391, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.136, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube009.geometry}
        material={nodes.Cube009.material}
        position={[0, 0.273, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.136, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube010.geometry}
        material={nodes.Cube010.material}
        position={[0, 0.167, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.136, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube011.geometry}
        material={nodes.Cube011.material}
        position={[0, 0.062, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.138, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube012.geometry}
        material={nodes.Cube012.material}
        position={[0, -0.035, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.138, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube013.geometry}
        material={nodes.Cube013.material}
        position={[0, -0.127, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.138, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube014.geometry}
        material={nodes.Cube014.material}
        position={[0, -0.215, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.139, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube015.geometry}
        material={nodes.Cube015.material}
        position={[0, -0.295, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.14, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube016.geometry}
        material={nodes.Cube016.material}
        position={[0, -0.375, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.14, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Cube017.geometry}
        material={nodes.Cube017.material}
        position={[0, -0.445, 0.261]}
        rotation={[-Math.PI, 0, 0]}
        scale={[-0.14, -0.005, -0.008]}
      >
        <meshStandardMaterial {...props} color={Fret.color} />
      </mesh>
      <mesh
        geometry={nodes.Body.geometry}
        material={nodes.Body.material}
        position={[0, -0.894, 0.173]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.49}
      >
        <meshStandardMaterial {...props} color={Body.color} ref={body} />
      </mesh>
      <mesh
        geometry={nodes.Tuner.geometry}
        material={nodes.Tuner.material}
        position={[2.592, 2.002, -1.463]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
      >
        <meshStandardMaterial {...props} color={Tuner.color} ref={tuner} />
      </mesh>
    </group>
  );
}

export default Klasik;
useGLTF.preload("/Klasik.glb");
